[{"title":"电脑操作小技巧","url":"/2025/04/05/%E7%94%B5%E8%84%91%E6%93%8D%E4%BD%9C%E5%B0%8F%E6%8A%80%E5%B7%A7/","content":"解决文件夹进程占用与权限问题针对Windows 11家庭中文版中因进程占用或权限不足导致的文件夹删除难题，以下是结合系统原生命令的解决方案\n一、终止占用文件的进程（可选）如果文件夹被其他程序占用（如后台进程或病毒），需先终止相关进程：\n\n通过任务管理器手动结束进程（常规操作）\n\n鼠标右键单击任务栏，点击任务管理器，进而在“进程”栏中搜索并结束任务\n\n命令行终止进程（需管理员权限）：\n\n按win+R，输入cmd，进而按Ctrl+Shift+Enter以管理员权限打开\n\ntaskkill /f /im &quot;进程名.exe&quot;  \n\n示例：若资源管理器占用，可重启资源管理器\ntaskkill /f /im explorer.exe &amp;&amp; start explorer.exe  \n\n二、获取文件夹所有权并赋予完全控制权限通过CMD管理员命令强制获取权限：\n\n获取所有权：\ntakeown /f &quot;文件夹路径&quot; /r /d y  \n\n\n/r：递归操作子文件\n/d y：静默确认（无需交互）\n\n\n赋予管理员完全控制权限：\nicacls &quot;文件夹路径&quot; /grant Administrators:F /t  \n\n\n/grant Administrators:F：授予管理员完全控制权\n\n/t：递归应用到子项\n\n\n\n\n三、强制删除文件夹CMD命令\nrd /s /q &quot;文件夹路径&quot;  \n\n参数解析：\n\n/s：删除文件夹及子内容\n/q：静默模式（无确认提示）\n\nPowershell指令takeown /f &quot;文件夹路径&quot; /r /d y  icacls &quot;文件夹路径&quot; /grant Administrators:F /t  Remove-Item -Path &quot;文件夹路径&quot; -Force -Recurse  \n\n扩展：解决深层权限问题的进阶命令若上述步骤仍失败，可尝试重置权限继承（修复权限混乱）\nicacls &quot;文件夹路径&quot; /reset /t /c /l  \n\n\n/reset：恢复默认权限\n/t：递归操作子项\n\nGithub大文件警告在Github中，如果我们使用Git来记录，如果我们不慎提交了大文件，即使当前提交移除了大文件，历史记录中可能仍有残留。\n你可能误以为强制推送能解决问题，但实际上，如果历史提交中的大文件未被处理，GitHub仍然会检测到并发出警告。需要确保所有历史中的大文件都被迁移或删除，而不仅仅是当前提交。\n在这里，我们以.flac音频文件为例，向大家讲解如何解决Github大文件警告问题\n核心原因分析\n未正确使用 Git LFS 追踪大文件若历史提交中仍存在大文件记录，GitHub 仍能检测到旧版本中的大文件残留\n\nGit LFS 配置不完整如果未执行完整的 LFS 初始化、文件追踪和 .gitattributes 提交，系统仍会以普通 Git 方式处理大文件\n\n缓存或历史记录未清理本地 .git 目录可能保留旧对象，或 GitHub 服务端缓存未刷新，导致历史文件仍被检测\n\n\n分步解决方案\n下载 Git LFS 安装包\n\n\n访问Git LFS 官网，点击 “Download” 获取 Windows 版 .exe 安装程序\n\n\n运行安装程序\n\n\n双击下载的 git-lfs-windows-amd64-v3.4.0.exe 文件，按默认路径安装\n\n\n验证 LFS 安装\n\n\n在 Git Bash 中输入：\ngit lfs version\n\n若显示版本号（如 git-lfs/3.4.0）则安装成功\n\n\n配置Git LFS管理大文件\n初始化 LFS 支持\n\n\n在 Git Bash 中执行全局初始化：\ngit lfs install\n\n此命令会在所有仓库中启用 LFS 支持\n\n\n\n指定需追踪的大文件类型\n进入你的项目目录（例如 cd ~/myblog），执行：\ngit lfs track &quot;*.flac&quot;   # 追踪所有 .flac 音频文件git lfs track &quot;*.zip&quot;   # 追踪所有的.zip 压缩包文件\n\n生成的 .gitattributes 文件将记录追踪规则\n\n提交配置文件\ngit add .gitattributesgit commit -m &quot;启用 Git LFS 追踪大文件&quot;\n\n迁移历史大文件到 LFS（解决现有仓库问题）\n清理历史大文件\ngit lfs migrate import --include=&quot;*.flac&quot; --everything\n\n此命令会重写提交历史，将匹配文件迁移到 LFS\n\n强制推送更新\ngit push --force\n\n覆盖远程仓库历史记录\n\n\n验证与维护\n检查已追踪文件\ngit lfs ls-files   # 显示通过 LFS 管理的文件列表\n\n更新 LFS 缓存\ngit lfs prune      # 清理本地不再引用的 LFS 文件\n\n通过以上步骤，你的Github大文件警告问题可能得到彻底解决。\n","categories":["电脑操作"],"tags":["技术"]},{"title":"Hexo建站指南","url":"/2025/04/06/Hexo%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97/","content":"\n作为一名电脑小白，如何打造属于自己的个人博客网站呢？\n在这个流程中，我们将会学会Hexo建站的基本流程，即使是电脑小白也能轻易上手！\n在此，我将以win11系统的家庭中文版为例，帮助大家打造属于自己的网站！\n\nHexo为Hexo的中文官方文档\n为什么选择Hexo?核心优势：\n\n部署难度低：静态网站生成器，无需数据库，支持GitHub Pages免费托管\n主题生态丰富：支持Markdown写作与插件扩展（如SEO优化、评论系统），提供开箱即用的美观界面和交互功能（如评论系统、音乐播放器）\n生态规模：生态规模主题超500个，插件超1000个，中文社区活跃度高，部署教程完善（尤其适合国内开发者）\n交互功能优秀：支持第三方评论系统\n扩展性优良：插件生态成熟\nMarkdown 写作友好：支持通过 hexo new 命令快速创建文章，结合 Typora 等编辑器实现“写作-发布”无缝衔接，降低非技术用户的迁移成本。\n前端技术栈适配：开发者可通过 JavaScript 快速定制主题或开发插件（如集成 Algolia 搜索）\n\nHexo 在个人博客场景的专注设计、中文社区的强支撑以及开箱即用的易用性使其成为综合最优解。对于追求「快速搭建」和「高颜值」的个人用户，Hexo 的生态成熟度与学习曲线平滑度远超同类工具。\n环境准备\n安装Node.js\n\n\n访问Node.js官网，下载LTS版本（长期支持版），双击安装后打开终端输入 node -v显示版本号即成功\n注意：安装时会自动包含npm包管理器，无需单独安装\n\n\n安装Git\n\n\n访问Git官网，下载Windows版，安装时所有选项保持默认，完成后在终端输入 git --version 验证\n\n在这里，我们默认用户可以根据官方文档进行Node.js以及Git的安装，在环境准备方面不做过多的赘述\nHexo初始化（本地搭建）\n全局安装Hexo在任意文件夹空白处右键选择「Git Bash Here」，输入：\nnpm install -g hexo-cli   #安装Hexo核心工具\n在这里，我在D盘上创建了Projects文件夹，从而在Projects的Git Bash上进行的操作\n\nPS：我们通过快捷键Shift+鼠标右键可以直接进行“显示更多选项“的操作，从而点开Open Git Bash here选项卡进行操作\n‘#’号后面为注释，不要输入，之后的代码也一样\n\n\n创建博客文件夹\nhexo init myblog  # 创建名为myblog的文件夹cd myblog         # 进入该文件夹npm install       # 安装依赖（约1分钟）\n\n本地预览\nhexo clean   # 清理缓存hexo g       # 生成静态文件hexo s       # 启动本地服务器\n\n浏览器打开 http://localhost:4000 即可看到默认博客页面\n\n\n部署到GitHub（免费托管）\n创建GitHub仓库\n\n\n登录GitHub，新建仓库 用户名.github.io（如用户名为Tom则填Tom.github.io），其他选项保持默认\n\nPS: GitHub Pages 的 主站点服务（即通过 https://用户名.github.io 直接访问的网站）必须使用固定仓库名 用户名.github.io，无法自定义。这是 GitHub Pages 的底层规则限制\n\n\n\n\n配置Hexo部署用记事本打开 myblog/_config.yml 文件，在末尾添加:\ndeploy:  type: git  repo: https://github.com/你的用户名/你的用户名.github.io.git  branch: main\n\n\nPS:  每个冒号后必须加空格！否则报错\nPS: 注意把代码中你的用户名这一项改为你的Github用户名，不要直接复制粘贴整段代码\n\n\n安装部署插件并上传\nnpm install hexo-deployer-git --save  # 安装插件hexo clean &amp;&amp; hexo g -d               # 一键部署到GitHub\n\n完成后访问 https://你的用户名.github.io 即可看到线上博客\n\n\n基础配置（个性化修改）\n编辑站点配置文件\n编辑_config.yml 中的以下字段：\ntitle: 博客标题subtitle: 副标题author: 显示名称（与Github一致）description: 网站简介author: 你的名字language: zh-CN  # 中文界面url: 你的Github Pages地址（即你的GitHub仓库地址，格式为https://你的Github用户名.github.io）delpoy:    type: git   repo: [email protected]:你的Github用户名/你的Github用户名.github.io.git # 仓库SSH地址   branch: main #Github默认主分支\n\n\nPS: 注意个性化修改，不要照搬照抄\nrepo字段需替换为你的仓库SSH地址（可在GitHub仓库页点击“Code” → “SSH”获取）\n\n\n\n本地预览博客\n启动本地服务器\nhexo server\n\n\n访问http://localhost:4000查看本地效果\n\n\n创建第一篇测试文章\nhexo new &quot;我的第一篇博客&quot;\n\n\n文章会生成在 source&#x2F;_posts&#x2F;我的第一篇博客.md，用Markdown语法编辑内容后保存\n\n部署到Github Pages\n生成静态文件并部署\nhexo clean   # 清除缓存hexo generate  # 生成静态文件（可简写为 hexo g）hexo deploy   # 部署到GitHub（可简写为 hexo d）\n\n\n首次部署需输入GitHub账号密码或配置SSH密钥\n\n\n访问在线博客稍等2分钟后，访问 https://你的用户名.github.io 即可看到你的博客。\n\n\n常见问题\nGitHub未正确识别SSH密钥，导致部署权限被拒绝（Permission denied (publickey)）解决方案：\n\n检查并生成SSH密钥\n\n步骤1：生成SSH密钥打开Git Bash，执行以下命令（替换为你的GitHub邮箱）：\nssh-keygen -t rsa -C &quot;你的Github用户名@github.com&quot;\n\n连续按3次回车（不设密码），密钥会生成在 ~/.ssh/ 目录下\n\n步骤2：添加公钥到GitHub\n\n复制公钥内容\ncat ~/.ssh/id_rsa.pub\n登录GitHub → Settings → SSH and GPG Keys → New SSH Key → 粘贴公钥\n\n\n\n步骤3：测试SSH连接\n执行以下命令，若返回 Hi 你的Github用户名! 表示成功：\nssh -T git@github.com\n\n\n修正Hexo配置文件\n\n检查 _config.yml 的仓库地址确保 repo 字段使用 SSH协议（而非HTTPS）：\ndeploy:  type: git  repo: [email protected]:vigilux418/vigilux418.github.io.git  # 必须是SSH格式  branch: main\n\n\n⚠️ 如果之前使用HTTPS地址，需修改为SSH格式\n\n\n\n\n清除缓存并重新部署\n\n删除 .deploy_git 文件夹该文件夹可能包含旧缓存导致冲突：\nrm -rf .deploy_git\n\n重新生成并部署\nhexo cleanhexo ghexo d\n\n\n检查Git全局配置\n\n设置Git用户名和邮箱（与GitHub一致）\ngit config --global user.name &quot;你的Github用户名&quot;git config --global user.email &quot;你的Github用户名@github.com&quot;\n\n\n密钥权限处理\nWindows&#x2F;Mac需确保私钥文件权限为 600：\nchmod 600 ~/.ssh/id_rsa\n\nLF&#x2F;CRLF警告处理\n日志中的 LF will be replaced by CRLF 是Git换行符警告，不影响部署。如需解决：\ngit config --global core.autocrlf false  # 关闭自动转换\n\n\n国内网络环境对Github访问限制&#x2F;代理配置异常\n\n\n可以通过修改系统hosts文件来绕过默认的DNS流程\n**缺点：**1.  IP时效性：GitHub的IP可能变动，建议定期更新hosts内容（可订阅GitHub520项目自动更新）\n\n防病毒误删：部分杀毒软件可能拦截hosts修改，操作前可临时关闭防护\n\n\n推荐方案：使用代理工具\n笔者使用代理工具为Clash for Windows（具体安装情自行搜索）\n设置HTTP&#x2F;HTTPS代理\n配置命令：\ngit config --global http.proxy http://127.0.0.1:7890git config --global https.proxy http://127.0.0.1:7890\n\n\n端口号：Clash默认端口为7890（若修改过需同步调整）\n\n\n验证与测试\n\n检查代理连通性\n\n测试命令：\ncurl -v https://github.com\n\n\n若返回HTTP/2 200表示代理生效\n\n\n\n\n克隆主题仓库\n\n执行命令：\ngit clone https://github.com/next-theme/hexo-theme-next.git themes/next\n\n\n成功克隆即表示配置正确\n\n\n\n\n\n\n\n更换主题（可选）\n推荐使用NexT主题\n\n\n下载主题\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n\n启用主题\n修改 _config.yml：\ntheme: next\n\n\n主题配置参考路径 themes/next/_config.yml（需自行调整导航栏、配色等）\n重启服务即可生效\n\n\n\n编辑博客文章\n创建&#x2F;打开文章\n\n\n创建文章\n在博客根目录（比如我的是D:\\Projects\\myblog）打开Git Bash，输入以下命令：\n hexo new &quot;我的第二篇博客&quot;\n\n\n此命令会在 source/_posts 目录生成 我的第二篇博客.md 文件\n\n\n打开文章\n在博客根目录的source文件夹中找到.md文件，双击打开*（推荐使用VS Code或Typora编辑）*\n\n\n\n编辑Markdown内容\n在文件头部添加YAML格式的元信息，例如：\ntitle: 我的第二篇博客date: 2025-04-04 14:30:00tags:  - 技术  - Hexo教程categories: 建站指南\n\n\ntags 和 categories 用于分类和标签页生成\n\n\n编写正文\n使用Markdown语法撰写内容，支持代码块、图片插入等：\n## 欢迎阅读我的第二篇博客这是正文内容，支持**加粗**、*斜体*、[链接](https://example.com)等格式。![图片描述](/images/example.jpg)  # 图片需放在`source/images`目录\n\n注意将图片放入source/images文件夹\nsource文件夹指的是根目录下的source文件夹，而非其它目录下的source文件夹\n如果你的source/images文件夹不存在，你需要去自己创建一个文件夹\n\n\n\n本地预览博客\n启动本地根服务器\n在博客根目录（比如我的是D:\\Projects\\myblog）执行：\nhexo clean &amp;&amp; hexo generate &amp;&amp; hexo server\n\n\n作用：清除缓存 → 生成静态文件 → 启动本地服务\n\n访问地址：浏览器输入 http://localhost:4000 实时查看效果\n\n\n部署更新到线上博客\n生成静态文件\n\nhexo generate  # 或简写为 hexo g\n\n\n生成的文件会存储在 public 目录，包含HTML、CSS等资源\n\n\n部署到GitHub Pages\n\nhexo deploy  # 或简写为 hexo d\n\n\n前提：确保 _config.yml 中已正确配置Git仓库地址和分支\n验证：等待2分钟后访问 https://你的Github用户名.github.io 查看更新\n\n访问我的博客\n通过GitHub Pages默认链接访问\n\n链接格式：https://你的Github用户名.github.io\n假设你已经正确配置仓库\n\n\n\n\n自定义域名访问（可选）\n\n\n步骤：\n\n购买域名：在阿里云、腾讯云等平台注册（如example.com）。\n\n配置DNS解析：添加CNAME记录指向你的Github用户名.github.io\n\n设置GitHub Pages：\n\n在博客根目录创建CNAME文件，内容为你的域名（如blog.example.com）。\n\n推送到GitHub仓库后，在仓库的Settings &gt; Pages中绑定域名\n\n\n\n自定义域名访问不会操作不用担心，我们将手把手教你绑定\n\n\n\n自定义域名访问以下是以阿里云为例的自定义域名配置全流程，用最简单的方式手把手教你操作，无需技术基础：\n第一步：购买域名\n注册阿里云账号\n访问阿里云官网 → 点击右上角【注册】→ 填写信息并完成实名认证\n\n\n搜索并购买域名\n登录后进入【域名注册】页面 → 输入想要的域名（如 example.com）→ 选择未被占用的域名 → 加入购物车并付款\n\n\n\n\n较便宜的域：.top、.site、.fun、online\n\n第二步：配置DNS解析（关键步骤）目标：让域名指向你的GitHub Pages网站\n\n进入阿里云域名控制台\n\n登录阿里云 → 点击顶部菜单【控制台】→ 左侧导航栏选择【域名】→ 找到已购买的域名 → 点击【解析】\n\n\n添加A记录（顶级域名解析）\n\n适用场景：直接使用 example.com 访问博客。\n\n操作步骤：\n\n点击【添加记录】→ 填写以下信息：\n\n主机记录：@ （代表顶级域名）\n\n记录类型：A\n\n记录值：依次添加GitHub的4个IP地址:\n185.199.108.153  185.199.109.153  185.199.110.153  185.199.111.153\n\n\n重复操作：共需添加4条A记录，每条填一个IP地址\n\n\nTTL：默认10分钟\n\n\n\n\n\n\n\n添加CNAME记录（子域名解析，可选）\n\n适用场景：使用 www.example.com 访问博客。\n操作步骤：\n点击【添加记录】→ 填写：\n主机记录：www\n记录类型：CNAME\n记录值：填你的GitHub Pages地址（即 你的Github用户名.github.io）\nTTL：默认10分钟\n\n\n\n\n\n\n保存设置\n\n点击【确认】→ 等待生效（通常10分钟~48小时）\n\n\n\n第三步：在GitHub仓库设置域名\n创建CNAME文件\n\n在本地博客根目录（如 D:\\Projects\\myblog）新建文件 CNAME（无后缀）→ 内容填你的域名（如 example.com）→ 保存\n\n\n常见问题：弹窗提醒“…\\CNAME参数错误”\n原因：1. 隐藏的文件后缀未删除\nWindows默认隐藏文件扩展名（如.txt），若直接重命名文件为CNAME，实际文件名可能是CNAME.txt，系统会因后缀与内容不匹配报错\n\n系统无法直接修改\n\n终极解决方案：\n\n打开命令提示符\n\n在D:\\Projects\\myblog目录的地址栏输入cmd → 回车。\n\n\n执行创建命令\necho example.com &gt; CNAME\n\n\n此命令会直接生成无后缀的CNAME文件，内容为你的域名（替换example.com）。\n\n\n\n验证文件是否正确\n\n检查文件图标\n正确的CNAME文件应显示为“未知类型”图标（非记事本图标）。\n\n\n查看文件属性\n右键文件 → 【属性】→ 确认“类型”为文件而非文本文档。\n\n\n推送至GitHub测试\n执行git add CNAME和git push后，检查GitHub仓库根目录是否出现该文件。\n\n\n\n\n\n推送文件到GitHub\ngit add CNAME  git commit -m &quot;添加域名配置&quot;  git push\n\n常见问题：出现报错fatal: not a git repository\n原因：当前目录未初始化 Git 仓库，或者 未正确进入 Git 仓库的根目录\n\nmyblog 目录下没有 .git 文件夹（即从未执行过 git init）\n当前路径与 Git 仓库的实际路径不匹配（例如误入子目录或父目录）\n\n解决方案：\n初始化 Git 仓库\n\n确认当前路径在 Git Bash 中输入以下命令，检查是否在 myblog 目录：\npwd # 应输出正确的根目录\n\n如果路径错误，使用 cd 命令切换目录：\ncd /d/Projects/myblog # 注意将路径替换为你的博客根目录！这个是我的博客根目录！\n\n初始化仓库执行以下命令创建 Git 仓库：\ngit init\n\n验证仓库状态\ngit status  # 应显示 &quot;No commits yet&quot; 或文件列表\n\n如果成功，继续执行 git add CNAME 即可。\n\n\n\n\n常见问题：fatal: No configured push destination\n原因：本地 Git 仓库尚未关联远程仓库（如 GitHub 仓库）\n\n未配置远程仓库地址本地仓库的 .git/config 文件中缺少 [remote &quot;origin&quot;] 配置项，Git 不知道要将代码推送到哪个远程服务器\n首次推送未指定目标首次推送代码时，必须明确告知 Git 远程仓库的 URL 或已配置的远程仓库名称\n\n解决方案：\n\n步骤 1：关联远程仓库\n在 Git Bash 中执行以下命令，将本地仓库与 GitHub 仓库关联（替换 你的GitHub仓库URL）：\ngit remote add origin https://github.com/你的用户名/你的仓库名.git\n\n\norigin 是远程仓库的默认别名，可自定义（如 github）。\n\n\n步骤 2：验证远程配置\n输入以下命令检查是否关联成功：\ngit remote -v\n\n预期输出：\norigin  https://github.com/你的电脑名/myblog.git (fetch)origin  https://github.com/你的电脑名/myblog.git (push)\n\n步骤 3：推送代码到远程仓库\n执行推送命令\ngit push -u origin main\n\n参数说明：\n\n-u：将本地分支与远程分支关联，后续可直接用git push\norigin：远程仓库别名。\nmain：分支名称（默认主分支）。\n\n\n\n若你发现你不慎写错了origin，可以用以下命令替换或更新origin:\ngit remote set-url origin 新仓库URL\n\n常见问题： git push 被拒绝\n原因：本地仓库的提交历史与远程仓库不一致\n\n远程仓库存在本地没有的新提交（比如通过网页直接修改、其他设备推送过代码，或初始仓库有默认文件），而 Git 为防止数据丢失拒绝覆盖。\n\n解决方案：\n\n方法一：\n\n拉取远程代码：\ngit pull origin main\n\n\n若拉取后无冲突，Git 会自动合并并生成一条合并提交记录。\n\n\n重新推送：\ngit push origin main\n\n\n若方案一无法解决，使用方案二（使用变基合并（保证提交历史线性））：\n若不想生成合并提交记录，可用 --rebase 参数将本地提交“嫁接”到远程最新提交上：\ngit pull --rebase origin main  # 拉取并变基git push origin main           # 重新推送\n\n\n适用场景：希望提交历史保持整洁（如个人项目）。\n\n\n\n\n\n绑定域名到GitHub Pages\n\n打开GitHub仓库 → 【Settings】→ 左侧【Pages】→ 在【Custom domain】输入你的域名（如 example.com）→ 点击【Save】\n\n\n\n第四步：启用HTTPS（安全访问）\n强制HTTPS\n\n在GitHub Pages设置页面 → 勾选【Enforce HTTPS】→ 等待约5分钟（证书自动颁发）\n\n\n验证成功\n\n浏览器访问 https://example.com → 地址栏显示绿色锁图标即成功\n\n\n\n第五步：验证是否生效\n检查DNS解析\n\n打开DNS检测工具 → 输入域名 → 查看是否解析到GitHub IP\n\n\n访问测试\n\n直接输入你的域名（如 example.com）→ 显示博客首页即成功！\n\n\n常见问题：自定义域名example.com无法访问（显示404），但直接访问你的Github用户名.github.io正常\n可能的解决方案：\n\nGitHub Pages配置未绑定自定义域名关键验证点：\n\n检查GitHub仓库设置：\n\n\n进入仓库 → Settings → Pages → Custom domain 是否填写 example.com。\n若未填写，需在此处添加并保存。\n\n\nCNAME文件验证：\n\n\n仓库根目录需存在 CNAME 文件，内容为 example.com（无协议头）。\n若文件被误删或修改，GitHub Pages会解除域名绑定。\n\n\nDNS解析未生效或错误\n排查步骤:\n\n登录阿里云控制台→ 域名解析DNS→ 检查example.com的解析记录：\nGitHub Pages要求CNAME解析到&lt;你的GitHub用户名&gt;.github.io\n若误设为A记录，需修改为CNAME类型，记录值为GitHub Pages地址。\n\n\nTTL时间检查：若最近修改过解析记录，需等待TTL过期（通常2-24小时）或手动刷新本地DNS缓存（Windows：ipconfig /flushdns；macOS：sudo killall -HUP mDNSResponder）。\n\n\nHTTPS证书未自动部署\n\n\n\n现象：若强制HTTPS访问但证书未生效，可能导致404。\n解决方案：\n在GitHub Pages设置中勾选 Enforce HTTPS。\n若证书未生成（状态为“Pending”），等待10分钟或重新保存CNAME配置触发证书申请。\n\n\n\n\n域名状态异常\n\n潜在问题：\n域名未实名认证：阿里云域名需完成实名审核方可解析。\n域名过期或冻结：登录阿里云控制台 → 域名管理 → 查看 example 状态。\n\n\n\n\n\n\n\n\nHexo博客的更新与修改升级Hexo与主题\n升级Node.js和Hexo\n# 升级Node.js到最新LTS版本（需先安装nvm）nvm install --ltsnvm use --lts# 升级Hexo到最新版npm uninstall -g hexo-cli  # 卸载旧版npm install -g hexo-cli    # 安装新版\n\n更新主题（以Next主题为例）\n\n若主题通过Git安装：\ncd themes/next  # 进入主题目录git pull        # 拉取最新代码\n\n若主题通过npm安装：\nnpm update hexo-theme-next  # 更新主题包\n\n\n\n修改博客基础配置\n编辑站点配置文件（_config.yml）\n打开根目录的_config.yml，修改以下字段：\n# Sitetitle: 你的博客名subtitle: &quot;副标题（如：技术分享与生活记录）&quot;description: &quot;博客简介&quot;keywords: &quot;关键词1, 关键词2&quot;author: 你的名字language: zh-CN  # 中文timezone: Asia/Shanghai  # 时区\n\n修改主题配置文件\n\n\n   进入主题目录（如themes/next/_config.yml），调整以下设置：\n   # 头像设置avatar:  url: /images/avatar.jpg  # 图片需放在source/images目录  rounded: true  # 圆形头像  rotated: true   # 鼠标悬停旋转# 菜单导航menu:  首页: / || fa fa-home  归档: /archives/ || fa fa-archive  标签: /tags/ || fa fa-tags  关于: /about/ || fa fa-user\n\n\nPS: 在VSCode中，可以用Ctrl+F快捷键，快速查找关键词\n\n调整博客样式\n更换主题风格（以Next为例）\n在主题配置文件中搜索scheme，选择一种预设风格：\nscheme: Pisces  # 可选Muse/Mist/Pisces/Gemini\n\n自定义CSS样式\n\n在source/_data目录新建styles.styl文件（若无此目录则手动创建）\n\n添加自定义样式（例如修改字体和背景）：\nbody &#123;  font-family: &quot;Microsoft YaHei&quot;, sans-serif;  background: url(/images/bg.jpg);&#125;\n\n在主题配置中启用自定义CSS：\ncustom_file_path:  style: source/_data/styles.styl\n\n\n\n进阶优化（可选）\n添加搜索功能\nnpm install hexo-generator-searchdb --save\n\n在主题配置（themes&#x2F;_config文件）中启用：\nlocal_search:  enable: true\n\n开启评论系统（以Gitalk为例）\nnpm install gitalk --save\n\n在主题配置文件中添加：\ngitalk:  enable: true  clientID: &quot;你的GitHub应用ID&quot;  clientSecret: &quot;你的GitHub应用密钥&quot;  repo: &quot;你的Github用户名.github.io&quot;  owner: &quot;你的Github用户名&quot;\n\n清理缓存并重启服务操作hexo clean &amp;&amp; hexo g &amp;&amp; hexo s\n\n\n常见问题：\n使用http://localhost:4000与http://你的Github用户名.github.io预览结果不一致\n常见原因：浏览器缓存干扰\n解决方案：\n\n强制刷新线上页面（Ctrl+F5或Shift+刷新）\n\n在Hexi命令链中加入缓存清理\nhexo clean &amp;&amp; hexo g -d\n\n\n","categories":["建站指南"],"tags":["技术","Hexo教程"]}]