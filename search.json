[{"title":"Hexo建站指南","url":"/posts/47891/","content":"\r\n作为一名电脑小白，如何打造属于自己的个人博客网站呢？\r\n在这个流程中，我们将会学会Hexo建站的基本流程，即使是电脑小白也能轻易上手！\r\n在此，我将以win11系统的家庭中文版为例，帮助大家打造属于自己的网站！\r\n\r\nHexo为Hexo的中文官方文档\r\n为什么选择Hexo?\r\n核心优势：\r\n\r\n部署难度低：静态网站生成器，无需数据库，支持GitHub Pages免费托管\r\n主题生态丰富：支持Markdown写作与插件扩展（如SEO优化、评论系统），提供开箱即用的美观界面和交互功能（如评论系统、音乐播放器）\r\n生态规模：生态规模主题超500个，插件超1000个，中文社区活跃度高，部署教程完善（尤其适合国内开发者）\r\n交互功能优秀：支持第三方评论系统\r\n扩展性优良：插件生态成熟\r\nMarkdown 写作友好：支持通过 hexo new 命令快速创建文章，结合 Typora 等编辑器实现“写作-发布”无缝衔接，降低非技术用户的迁移成本。\r\n前端技术栈适配：开发者可通过 JavaScript 快速定制主题或开发插件（如集成 Algolia 搜索）\r\n\r\nHexo 在个人博客场景的专注设计、中文社区的强支撑以及开箱即用的易用性使其成为综合最优解。对于追求「快速搭建」和「高颜值」的个人用户，Hexo 的生态成熟度与学习曲线平滑度远超同类工具。\r\n环境准备\r\n\r\n安装Node.js\r\n\r\n\r\n访问Node.js官网，下载LTS版本（长期支持版），双击安装后打开终端输入node -v显示版本号即成功\r\n注意：安装时会自动包含npm包管理器，无需单独安装\r\n\r\n\r\n安装Git\r\n\r\n\r\n访问Git官网，下载Windows版，安装时所有选项保持默认，完成后在终端输入 git --version 验证\r\n\r\n在这里，我们默认用户可以根据官方文档进行Node.js以及Git的安装，在环境准备方面不做过多的赘述\r\nHexo初始化（本地搭建）\r\n\r\n全局安装Hexo 在任意文件夹空白处右键选择「Git Bash Here」，输入：\r\nnpm install -g hexo-cli   #安装Hexo核心工具\r\n在这里，我在D盘上创建了Projects文件夹，从而在Projects的Git Bash上进行的操作\r\n\r\nPS：我们通过快捷键Shift+鼠标右键可以直接进行“显示更多选项“的操作，从而点开Open Git Bash here选项卡进行操作\r\n’#’号后面为注释，不要输入，之后的代码也一样\r\n\r\n创建博客文件夹\r\nhexo init myblog  # 创建名为myblog的文件夹cd myblog         # 进入该文件夹npm install       # 安装依赖（约1分钟）\r\n本地预览\r\nhexo clean   # 清理缓存hexo g       # 生成静态文件hexo s       # 启动本地服务器\r\n浏览器打开 http://localhost:4000 即可看到默认博客页面\r\n\r\n部署到GitHub（免费托管）\r\n\r\n创建GitHub仓库\r\n\r\n\r\n登录GitHub，新建仓库 用户名.github.io（如用户名为Tom则填Tom.github.io），其他选项保持默认\r\n\r\nPS: GitHub Pages 的 主站点服务（即通过 https://用户名.github.io 直接访问的网站）必须使用固定仓库名 用户名.github.io，无法自定义。这是 GitHub Pages 的底层规则限制\r\n\r\n\r\n\r\n配置Hexo部署 用记事本打开 myblog/_config.yml 文件，在末尾添加:\r\ndeploy:  type: git  repo: https://github.com/你的用户名/你的用户名.github.io.git  branch: main\r\n\r\nPS: 每个冒号后必须加空格！否则报错\r\nPS: 注意把代码中你的用户名这一项改为你的Github用户名，不要直接复制粘贴整段代码\r\n\r\n安装部署插件并上传\r\nnpm install hexo-deployer-git --save  # 安装插件hexo clean &amp;&amp; hexo g -d               # 一键部署到GitHub\r\n完成后访问 https://你的用户名.github.io 即可看到线上博客\r\n\r\n基础配置（个性化修改）\r\n\r\n编辑站点配置文件\r\n编辑_config.yml 中的以下字段：\r\ntitle: 博客标题subtitle: 副标题author: 显示名称（与Github一致）description: 网站简介author: 你的名字language: zh-CN  # 中文界面url: 你的Github Pages地址（即你的GitHub仓库地址，格式为https://你的Github用户名.github.io）delpoy:    type: git   repo: [email protected]:你的Github用户名/你的Github用户名.github.io.git # 仓库SSH地址   branch: main #Github默认主分支\r\n\r\nPS: 注意个性化修改，不要照搬照抄\r\nrepo字段需替换为你的仓库SSH地址（可在GitHub仓库页点击“Code” → “SSH”获取）\r\n\r\n\r\n本地预览博客\r\n\r\n启动本地服务器\r\nhexo server\r\n\r\n\r\n访问http://localhost:4000查看本地效果\r\n\r\n\r\n创建第一篇测试文章\r\nhexo new &quot;我的第一篇博客&quot;\r\n\r\n\r\n文章会生成在 source/_posts/我的第一篇博客.md，用Markdown语法编辑内容后保存\r\n\r\n部署到Github Pages\r\n\r\n生成静态文件并部署\r\nhexo clean   # 清除缓存hexo generate  # 生成静态文件（可简写为 hexo g）hexo deploy   # 部署到GitHub（可简写为 hexo d）\r\n\r\n首次部署需输入GitHub账号密码或配置SSH密钥\r\n\r\n访问在线博客 稍等2分钟后，访问 https://你的用户名.github.io 即可看到你的博客。\r\n\r\n常见问题\r\n\r\nGitHub未正确识别SSH密钥，导致部署权限被拒绝（Permission denied (publickey)）\r\n解决方案：\r\n\r\n检查并生成SSH密钥\r\n\r\n步骤1：生成SSH密钥 打开Git Bash，执行以下命令（替换为你的GitHub邮箱）：\r\nssh-keygen -t rsa -C &quot;你的Github用户名@github.com&quot;\r\n连续按3次回车（不设密码），密钥会生成在 ~/.ssh/ 目录下\r\n步骤2：添加公钥到GitHub\r\n\r\n复制公钥内容\r\ncat ~/.ssh/id_rsa.pub\r\n登录GitHub → Settings → SSH and GPG Keys → New SSH Key → 粘贴公钥\r\n\r\n步骤3：测试SSH连接\r\n执行以下命令，若返回 Hi 你的Github用户名! 表示成功：\r\nssh -T git@github.com\r\n\r\n修正Hexo配置文件\r\n\r\n检查 _config.yml 的仓库地址 确保 repo 字段使用 SSH协议（而非HTTPS）：\r\ndeploy:  type: git  repo: [email protected]:vigilux418/vigilux418.github.io.git  # 必须是SSH格式  branch: main\r\n\r\n⚠️ 如果之前使用HTTPS地址，需修改为SSH格式\r\n\r\n\r\n清除缓存并重新部署\r\n\r\n删除 .deploy_git 文件夹 该文件夹可能包含旧缓存导致冲突：\r\nrm -rf .deploy_git\r\n重新生成并部署\r\nhexo cleanhexo ghexo d\r\n\r\n检查Git全局配置\r\n\r\n设置Git用户名和邮箱（与GitHub一致）\r\ngit config --global user.name &quot;你的Github用户名&quot;git config --global user.email &quot;你的Github用户名@github.com&quot;\r\n\r\n密钥权限处理\r\nWindows/Mac需确保私钥文件权限为 600：\r\nchmod 600 ~/.ssh/id_rsa\r\nLF/CRLF警告处理\r\n日志中的 LF will be replaced by CRLF 是Git换行符警告，不影响部署。如需解决：\r\ngit config --global core.autocrlf false  # 关闭自动转换\r\n\r\n国内网络环境对Github访问限制/代理配置异常\r\n\r\n\r\n可以通过修改系统hosts文件来绕过默认的DNS流程\r\n缺点：1. IP时效性：GitHub的IP可能变动，建议定期更新hosts内容（可订阅GitHub520项目自动更新）\r\n\r\n防病毒误删：部分杀毒软件可能拦截hosts修改，操作前可临时关闭防护\r\n\r\n推荐方案：使用代理工具\r\n笔者使用代理工具为Clash for Windows（具体安装情自行搜索）\r\n设置HTTP/HTTPS代理\r\n配置命令：\r\ngit config --global http.proxy http://127.0.0.1:7890git config --global https.proxy http://127.0.0.1:7890\r\n\r\n端口号：Clash默认端口为7890（若修改过需同步调整）\r\n\r\n验证与测试\r\n\r\n检查代理连通性\r\n\r\n测试命令：\r\ncurl -v https://github.com\r\n\r\n若返回HTTP/2 200表示代理生效\r\n\r\n\r\n克隆主题仓库\r\n\r\n执行命令：\r\ngit clone https://github.com/next-theme/hexo-theme-next.git themes/next\r\n\r\n成功克隆即表示配置正确\r\n\r\n\r\n\r\n\r\n更换主题（可选）\r\n\r\n推荐使用NexT主题\r\n\r\n\r\n下载主题\r\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\r\n启用主题\r\n修改 _config.yml：\r\ntheme: next\r\n\r\n主题配置参考路径 themes/next/_config.yml（需自行调整导航栏、配色等）\r\n重启服务即可生效\r\n\r\n\r\n编辑博客文章\r\n\r\n创建/打开文章\r\n\r\n\r\n创建文章\r\n在博客根目录（比如我的是D:\\Projects\\myblog）打开Git Bash，输入以下命令：\r\nhexo new &quot;我的第二篇博客&quot;\r\n\r\n此命令会在 source/_posts 目录生成 我的第二篇博客.md 文件\r\n\r\n打开文章\r\n在博客根目录的source文件夹中找到.md文件，双击打开（推荐使用VS Code或Typora编辑）\r\n\r\n\r\n编辑Markdown内容\r\n在文件头部添加YAML格式的元信息，例如：\r\ntitle: 我的第二篇博客date: 2025-04-04 14:30:00tags:  - 技术  - Hexo教程categories: 建站指南\r\n\r\ntags 和 categories 用于分类和标签页生成\r\n\r\n编写正文\r\n使用Markdown语法撰写内容，支持代码块、图片插入等：\r\n## 欢迎阅读我的第二篇博客这是正文内容，支持**加粗**、*斜体*、[链接](https://example.com)等格式。![图片描述](/images/example.jpg)  # 图片需放在`source/images`目录\r\n\r\n注意将图片放入source/images文件夹\r\nsource文件夹指的是根目录下的source文件夹，而非其它目录下的source文件夹\r\n如果你的source/images文件夹不存在，你需要去自己创建一个文件夹 ### 本地预览博客\r\n\r\n启动本地根服务器\r\n在博客根目录（比如我的是D:\\Projects\\myblog）执行：\r\nhexo clean &amp;&amp; hexo generate &amp;&amp; hexo server\r\n\r\n\r\n作用：清除缓存 → 生成静态文件 → 启动本地服务\r\n访问地址：浏览器输入 http://localhost:4000 实时查看效果\r\n\r\n部署更新到线上博客\r\n\r\n生成静态文件\r\n\r\nhexo generate  # 或简写为 hexo g\r\n\r\n生成的文件会存储在 public 目录，包含HTML、CSS等资源\r\n\r\n\r\n部署到GitHub Pages\r\n\r\nhexo deploy  # 或简写为 hexo d\r\n\r\n前提：确保 _config.yml 中已正确配置Git仓库地址和分支\r\n验证：等待2分钟后访问 https://你的Github用户名.github.io 查看更新\r\n\r\n访问我的博客\r\n\r\n通过GitHub Pages默认链接访问\r\n\r\n链接格式：https://你的Github用户名.github.io &gt; 假设你已经正确配置仓库\r\n\r\n自定义域名访问（可选）\r\n\r\n步骤：\r\n\r\n购买域名：在阿里云、腾讯云等平台注册（如example.com）。\r\n配置DNS解析：添加CNAME记录指向你的Github用户名.github.io\r\n设置GitHub Pages：\r\n\r\n在博客根目录创建CNAME文件，内容为你的域名（如blog.example.com）。\r\n推送到GitHub仓库后，在仓库的Settings &gt; Pages中绑定域名\r\n\r\n\r\n自定义域名访问不会操作不用担心，我们将手把手教你绑定\r\n\r\n\r\n自定义域名访问\r\n以下是以阿里云为例的自定义域名配置全流程，用最简单的方式手把手教你操作，无需技术基础：\r\n第一步：购买域名\r\n\r\n注册阿里云账号\r\n\r\n访问阿里云官网 → 点击右上角【注册】→ 填写信息并完成实名认证\r\n\r\n搜索并购买域名\r\n\r\n登录后进入【域名注册】页面 → 输入想要的域名（如 example.com）→ 选择未被占用的域名 → 加入购物车并付款\r\n\r\n\r\n\r\n较便宜的域：.top、.site、.fun、online\r\n\r\n第二步：配置DNS解析（关键步骤）\r\n目标：让域名指向你的GitHub Pages网站\r\n\r\n进入阿里云域名控制台\r\n\r\n登录阿里云 → 点击顶部菜单【控制台】→ 左侧导航栏选择【域名】→ 找到已购买的域名 → 点击【解析】\r\n\r\n添加A记录（顶级域名解析）\r\n\r\n适用场景：直接使用 example.com 访问博客。\r\n操作步骤：\r\n\r\n点击【添加记录】→ 填写以下信息：\r\n\r\n主机记录：@ （代表顶级域名）\r\n记录类型：A\r\n记录值：依次添加GitHub的4个IP地址:\r\n185.199.108.153  185.199.109.153  185.199.110.153  185.199.111.153\r\n\r\n重复操作：共需添加4条A记录，每条填一个IP地址\r\n\r\nTTL：默认10分钟\r\n\r\n\r\n\r\n添加CNAME记录（子域名解析，可选）\r\n\r\n适用场景：使用 www.example.com 访问博客。\r\n操作步骤：\r\n\r\n点击【添加记录】→ 填写：\r\n\r\n主机记录：www\r\n记录类型：CNAME\r\n记录值：填你的GitHub Pages地址（即 你的Github用户名.github.io）\r\nTTL：默认10分钟\r\n\r\n\r\n\r\n保存设置\r\n\r\n点击【确认】→ 等待生效（通常10分钟~48小时）\r\n\r\n\r\n第三步：在GitHub仓库设置域名\r\n\r\n创建CNAME文件\r\n\r\n在本地博客根目录（如 D:\\Projects\\myblog）新建文件 CNAME（无后缀）→ 内容填你的域名（如 example.com）→ 保存\r\n\r\n\r\n常见问题：弹窗提醒“…”\r\n原因：1. 隐藏的文件后缀未删除\r\nWindows默认隐藏文件扩展名（如.txt），若直接重命名文件为CNAME，实际文件名可能是CNAME.txt，系统会因后缀与内容不匹配报错\r\n\r\n系统无法直接修改\r\n\r\n终极解决方案：\r\n\r\n打开命令提示符\r\n\r\n在D:\\Projects\\myblog目录的地址栏输入cmd → 回车。\r\n\r\n执行创建命令\r\necho example.com &gt; CNAME\r\n\r\n此命令会直接生成无后缀的CNAME文件，内容为你的域名（替换example.com）。\r\n\r\n\r\n验证文件是否正确\r\n\r\n检查文件图标\r\n\r\n正确的CNAME文件应显示为“未知类型”图标（非记事本图标）。\r\n\r\n查看文件属性\r\n\r\n右键文件 → 【属性】→ 确认“类型”为文件而非文本文档。\r\n\r\n推送至GitHub测试\r\n\r\n执行git add CNAME和git push后，检查GitHub仓库根目录是否出现该文件。\r\n\r\n\r\n\r\n推送文件到GitHub\r\ngit add CNAME  git commit -m &quot;添加域名配置&quot;  git push\r\n\r\n常见问题：出现报错fatal: not a git repository\r\n原因：当前目录未初始化 Git 仓库，或者 未正确进入 Git 仓库的根目录\r\n\r\nmyblog 目录下没有 .git 文件夹（即从未执行过 git init）\r\n当前路径与 Git 仓库的实际路径不匹配（例如误入子目录或父目录）\r\n\r\n解决方案：\r\n初始化 Git 仓库\r\n\r\n确认当前路径 在 Git Bash 中输入以下命令，检查是否在 myblog 目录：\r\npwd # 应输出正确的根目录\r\n如果路径错误，使用 cd 命令切换目录：\r\ncd /d/Projects/myblog # 注意将路径替换为你的博客根目录！这个是我的博客根目录！\r\n初始化仓库 执行以下命令创建 Git 仓库：\r\ngit init\r\n验证仓库状态\r\ngit status  # 应显示 &quot;No commits yet&quot; 或文件列表\r\n如果成功，继续执行 git add CNAME 即可。\r\n\r\n\r\n\r\n常见问题：fatal: No configured push destination\r\n原因：本地 Git 仓库尚未关联远程仓库（如 GitHub 仓库）\r\n\r\n未配置远程仓库地址 本地仓库的 .git/config 文件中缺少 [remote \"origin\"] 配置项，Git 不知道要将代码推送到哪个远程服务器\r\n首次推送未指定目标 首次推送代码时，必须明确告知 Git 远程仓库的 URL 或已配置的远程仓库名称\r\n\r\n解决方案：\r\n\r\n步骤 1：关联远程仓库\r\n在 Git Bash 中执行以下命令，将本地仓库与 GitHub 仓库关联（替换 你的GitHub仓库URL）：\r\ngit remote add origin https://github.com/你的用户名/你的仓库名.git\r\n\r\norigin 是远程仓库的默认别名，可自定义（如 github）。\r\n\r\n步骤 2：验证远程配置\r\n输入以下命令检查是否关联成功：\r\ngit remote -v\r\n预期输出：\r\norigin  https://github.com/你的电脑名/myblog.git (fetch)origin  https://github.com/你的电脑名/myblog.git (push)\r\n步骤 3：推送代码到远程仓库\r\n执行推送命令\r\ngit push -u origin main\r\n参数说明：\r\n\r\n-u：将本地分支与远程分支关联，后续可直接用git push\r\norigin：远程仓库别名。\r\nmain：分支名称（默认主分支）。\r\n\r\n\r\n若你发现你不慎写错了origin，可以用以下命令替换或更新origin:\r\ngit remote set-url origin 新仓库URL\r\n\r\n\r\n常见问题： git push 被拒绝\r\n原因：本地仓库的提交历史与远程仓库不一致\r\n\r\n远程仓库存在本地没有的新提交（比如通过网页直接修改、其他设备推送过代码，或初始仓库有默认文件），而 Git 为防止数据丢失拒绝覆盖。\r\n\r\n解决方案：\r\n\r\n方法一：\r\n\r\n拉取远程代码：\r\ngit pull origin main\r\n\r\n若拉取后无冲突，Git 会自动合并并生成一条合并提交记录。\r\n\r\n重新推送：\r\ngit push origin main\r\n\r\n若方案一无法解决，使用方案二（使用变基合并（保证提交历史线性））：\r\n若不想生成合并提交记录，可用 --rebase 参数将本地提交“嫁接”到远程最新提交上：\r\ngit pull --rebase origin main  # 拉取并变基git push origin main           # 重新推送\r\n\r\n适用场景：希望提交历史保持整洁（如个人项目）。\r\n\r\n\r\n\r\n绑定域名到GitHub Pages\r\n\r\n打开GitHub仓库 → 【Settings】→ 左侧【Pages】→ 在【Custom domain】输入你的域名（如 example.com）→ 点击【Save】\r\n\r\n\r\n第四步：启用HTTPS（安全访问）\r\n\r\n强制HTTPS\r\n\r\n在GitHub Pages设置页面 → 勾选【Enforce HTTPS】→ 等待约5分钟（证书自动颁发）\r\n\r\n验证成功\r\n\r\n浏览器访问 https://example.com → 地址栏显示绿色锁图标即成功\r\n\r\n\r\n第五步：验证是否生效\r\n\r\n检查DNS解析\r\n\r\n打开DNS检测工具 → 输入域名 → 查看是否解析到GitHub IP\r\n\r\n访问测试\r\n\r\n直接输入你的域名（如 example.com）→ 显示博客首页即成功！\r\n\r\n\r\n常见问题：自定义域名example.com无法访问（显示404），但直接访问你的Github用户名.github.io正常\r\n可能的解决方案：\r\n\r\nGitHub Pages配置未绑定自定义域名关键验证点：\r\n\r\n检查GitHub仓库设置：\r\n\r\n\r\n进入仓库 → Settings → Pages → Custom domain 是否填写 example.com。\r\n若未填写，需在此处添加并保存。\r\n\r\n\r\nCNAME文件验证：\r\n\r\n\r\n仓库根目录需存在 CNAME 文件，内容为 example.com（无协议头）。\r\n若文件被误删或修改，GitHub Pages会解除域名绑定。\r\n\r\nDNS解析未生效或错误\r\n排查步骤:\r\n\r\n登录阿里云控制台→ 域名解析DNS→ 检查example.com的解析记录：\r\n\r\nGitHub Pages要求CNAME解析到&lt;你的GitHub用户名&gt;.github.io\r\n若误设为A记录，需修改为CNAME类型，记录值为GitHub Pages地址。\r\n\r\nTTL时间检查：若最近修改过解析记录，需等待TTL过期（通常2-24小时）或手动刷新本地DNS缓存（Windows：ipconfig /flushdns；macOS：sudo killall -HUP mDNSResponder）。\r\n\r\nHTTPS证书未自动部署\r\n\r\n\r\n现象：若强制HTTPS访问但证书未生效，可能导致404。\r\n解决方案：\r\n\r\n在GitHub Pages设置中勾选 Enforce HTTPS。\r\n若证书未生成（状态为“Pending”），等待10分钟或重新保存CNAME配置触发证书申请。\r\n\r\n\r\n\r\n域名状态异常\r\n\r\n潜在问题：\r\n\r\n域名未实名认证：阿里云域名需完成实名审核方可解析。\r\n域名过期或冻结：登录阿里云控制台 → 域名管理 → 查看 example 状态。\r\n\r\n\r\n\r\n\r\n\r\nHexo博客的更新与修改\r\n升级Hexo与主题\r\n\r\n升级Node.js和Hexo\r\n# 升级Node.js到最新LTS版本（需先安装nvm）nvm install --ltsnvm use --lts# 升级Hexo到最新版npm uninstall -g hexo-cli  # 卸载旧版npm install -g hexo-cli    # 安装新版\r\n更新主题（以Next主题为例）\r\n\r\n若主题通过Git安装：\r\ncd themes/next  # 进入主题目录git pull        # 拉取最新代码\r\n若主题通过npm安装：\r\nnpm update hexo-theme-next  # 更新主题包\r\n\r\n\r\n修改博客基础配置\r\n\r\n编辑站点配置文件（_config.yml）\r\n打开根目录的_config.yml，修改以下字段：\r\n# Sitetitle: 你的博客名subtitle: &quot;副标题（如：技术分享与生活记录）&quot;description: &quot;博客简介&quot;keywords: &quot;关键词1, 关键词2&quot;author: 你的名字language: zh-CN  # 中文timezone: Asia/Shanghai  # 时区\r\n修改主题配置文件\r\n\r\n进入主题目录（如themes/next/_config.yml），调整以下设置：\r\n# 头像设置avatar:  url: /images/avatar.jpg  # 图片需放在source/images目录  rounded: true  # 圆形头像  rotated: true   # 鼠标悬停旋转# 菜单导航menu:  首页: / || fa fa-home  归档: /archives/ || fa fa-archive  标签: /tags/ || fa fa-tags  关于: /about/ || fa fa-user\r\n\r\nPS: 在VSCode中，可以用Ctrl+F快捷键，快速查找关键词\r\n\r\n调整博客样式\r\n\r\n更换主题风格（以Next为例）\r\n在主题配置文件中搜索scheme，选择一种预设风格：\r\nscheme: Pisces  # 可选Muse/Mist/Pisces/Gemini\r\n自定义CSS样式\r\n\r\n在source/_data目录新建styles.styl文件（若无此目录则手动创建）\r\n添加自定义样式（例如修改字体和背景）：\r\nbody &#123;  font-family: &quot;Microsoft YaHei&quot;, sans-serif;  background: url(/images/bg.jpg);&#125;\r\n在主题配置中启用自定义CSS：\r\ncustom_file_path:  style: source/_data/styles.styl\r\n\r\n\r\n进阶优化（可选）\r\n\r\n添加搜索功能\r\nnpm install hexo-generator-searchdb --save\r\n在主题配置（themes/_config文件）中启用：\r\nlocal_search:  enable: true\r\n开启评论系统（以Gitalk为例）\r\nnpm install gitalk --save\r\n在主题配置文件中添加：\r\ngitalk:  enable: true  clientID: &quot;你的GitHub应用ID&quot;  clientSecret: &quot;你的GitHub应用密钥&quot;  repo: &quot;你的Github用户名.github.io&quot;  owner: &quot;你的Github用户名&quot;\r\n\r\n清理缓存并重启服务操作\r\nhexo clean &amp;&amp; hexo g &amp;&amp; hexo s\r\n\r\n常见问题：\r\n使用http://localhost:4000与http://你的Github用户名.github.io预览结果不一致\r\n常见原因：浏览器缓存干扰\r\n解决方案：\r\n\r\n强制刷新线上页面（Ctrl+F5或Shift+刷新）\r\n在Hexi命令链中加入缓存清理\r\nhexo clean &amp;&amp; hexo g -d\r\n\r\n\r\n","categories":["建站指南"],"tags":["技术","Hexo教程"]},{"title":"电脑操作小技巧","url":"/posts/b88343ee/","content":"解决文件夹进程占用与权限问题\r\n针对Windows 11家庭中文版中因进程占用或权限不足导致的文件夹删除难题，以下是结合系统原生命令的解决方案\r\n一、终止占用文件的进程（可选）\r\n如果文件夹被其他程序占用（如后台进程或病毒），需先终止相关进程：\r\n\r\n通过任务管理器手动结束进程（常规操作）\r\n\r\n鼠标右键单击任务栏，点击任务管理器，进而在“进程”栏中搜索并结束任务\r\n\r\n命令行终止进程（需管理员权限）：\r\n\r\n按win+R，输入cmd，进而按Ctrl+Shift+Enter以管理员权限打开\r\n\r\ntaskkill /f /im &quot;进程名.exe&quot;  \r\n示例：若资源管理器占用，可重启资源管理器\r\ntaskkill /f /im explorer.exe &amp;&amp; start explorer.exe  \r\n\r\n二、获取文件夹所有权并赋予完全控制权限\r\n通过CMD管理员命令强制获取权限：\r\n\r\n获取所有权：\r\ntakeown /f &quot;文件夹路径&quot; /r /d y  \r\n\r\n/r：递归操作子文件\r\n/d y：静默确认（无需交互）\r\n\r\n赋予管理员完全控制权限：\r\nicacls &quot;文件夹路径&quot; /grant Administrators:F /t  \r\n\r\n/grant Administrators:F：授予管理员完全控制权\r\n/t：递归应用到子项\r\n\r\n\r\n三、强制删除文件夹\r\nCMD命令\r\nrd /s /q &quot;文件夹路径&quot;  \r\n参数解析：\r\n\r\n/s：删除文件夹及子内容\r\n/q：静默模式（无确认提示）\r\n\r\nPowershell指令\r\ntakeown /f &quot;文件夹路径&quot; /r /d y  icacls &quot;文件夹路径&quot; /grant Administrators:F /t  Remove-Item -Path &quot;文件夹路径&quot; -Force -Recurse  \r\n扩展：解决深层权限问题的进阶命令\r\n若上述步骤仍失败，可尝试重置权限继承（修复权限混乱）\r\nicacls &quot;文件夹路径&quot; /reset /t /c /l  \r\n\r\n/reset：恢复默认权限\r\n/t：递归操作子项\r\n\r\nGithub大文件警告\r\n在Github中，如果我们使用Git来记录，如果我们不慎提交了大文件，即使当前提交移除了大文件，历史记录中可能仍有残留。\r\n你可能误以为强制推送能解决问题，但实际上，如果历史提交中的大文件未被处理，GitHub仍然会检测到并发出警告。需要确保所有历史中的大文件都被迁移或删除，而不仅仅是当前提交。\r\n在这里，我们以.flac音频文件为例，向大家讲解如何解决Github大文件警告问题\r\n核心原因分析\r\n\r\n未正确使用 Git LFS 追踪大文件 若历史提交中仍存在大文件记录，GitHub 仍能检测到旧版本中的大文件残留\r\nGit LFS 配置不完整 如果未执行完整的 LFS 初始化、文件追踪和 .gitattributes 提交，系统仍会以普通 Git 方式处理大文件\r\n缓存或历史记录未清理 本地 .git 目录可能保留旧对象，或 GitHub 服务端缓存未刷新，导致历史文件仍被检测\r\n\r\n分步解决方案\r\n\r\n下载 Git LFS 安装包\r\n\r\n\r\n访问Git LFS 官网，点击 “Download” 获取 Windows 版 .exe 安装程序\r\n\r\n\r\n运行安装程序\r\n\r\n\r\n双击下载的 git-lfs-windows-amd64-v3.4.0.exe 文件，按默认路径安装\r\n\r\n\r\n验证 LFS 安装\r\n\r\n\r\n在 Git Bash 中输入：\r\ngit lfs version\r\n若显示版本号（如 git-lfs/3.4.0）则安装成功\r\n\r\n配置Git LFS管理大文件\r\n\r\n初始化 LFS 支持\r\n\r\n\r\n在 Git Bash 中执行全局初始化：\r\ngit lfs install\r\n此命令会在所有仓库中启用 LFS 支持\r\n\r\n\r\n指定需追踪的大文件类型\r\n进入你的项目目录（例如 cd ~/myblog），执行：\r\ngit lfs track &quot;*.flac&quot;   # 追踪所有 .flac 音频文件git lfs track &quot;*.zip&quot;   # 追踪所有的.zip 压缩包文件\r\n生成的 .gitattributes 文件将记录追踪规则\r\n提交配置文件\r\ngit add .gitattributesgit commit -m &quot;启用 Git LFS 追踪大文件&quot;\r\n\r\n迁移历史大文件到 LFS（解决现有仓库问题）\r\n\r\n清理历史大文件\r\ngit lfs migrate import --include=&quot;*.flac&quot; --everything\r\n此命令会重写提交历史，将匹配文件迁移到 LFS\r\n强制推送更新\r\ngit push --force\r\n覆盖远程仓库历史记录\r\n\r\n验证与维护\r\n\r\n检查已追踪文件\r\ngit lfs ls-files   # 显示通过 LFS 管理的文件列表\r\n更新 LFS 缓存\r\ngit lfs prune      # 清理本地不再引用的 LFS 文件\r\n\r\n通过以上步骤，你的Github大文件警告问题可能得到彻底解决。\r\n","categories":["电脑操作"],"tags":["技术"]},{"title":"Hexo美化指南","url":"/posts/8a2133d3/","content":"\r\n作为一名电脑小白，如何装饰属于自己的个人博客网站呢？\r\n在这个流程中，我们将会学会Hexo个性化装饰的基本流程，即使是电脑小白也能轻易上手！\r\n在此，我将以Hexo+Next主题为例，帮助大家打造属于自己的网站！\r\n\r\nURL配置\r\n\r\n参考文档：Hexo站点基本配置与实用工具指北 | zzy的打工日志\r\n\r\n由于我们写文章时title可能含有中文，因此会生成含有中文的url，这会造成许多不可预料的问题。于是采用另外的方式来生成永久链接。\r\n首先键入以下命令安装相应插件：\r\nnpm install hexo-abbrlink --save\r\n接着修改站点配置文件 _config.yml 中的 permalink 字段\r\npermalink: posts/:abbrlink/abbrlink:\talg: crc32   # 算法： crc16(default) and crc32\trep: hex     # 进制： dec(default) and hex\r\n这样就完成了永久链接的修改，文章在发布时会被自动分配16进制代码\r\n站点页面初始化\r\n\r\n参考文档：Hexo站点基本配置与实用工具指北 | zzy的打工日志\r\n\r\n在站点配置文件修改完成后，网站的tags、categories等页面仍无法正确跳转，需要进行页面初始化配置。\r\n新建标签页面\r\n在Git Bash里键入以下命令：\r\n$ hexo new page &quot;tags&quot;\r\n此时，hexo会在 Hexo/source/ 下创建一个tags目录，并在其中放置index.md文件。\r\n打开index.md文件，修改其meta属性，添加如下内容：\r\ntype: &quot;tags&quot;\r\n在本地调试后，即可发现tags页面跳转正常。\r\n在文章写作过程中，可以在meta数据中的tags字段后添加[]来放置tags，支持多个标签，每个标签之间使用半角英文逗号分割,如：\r\ntags: [Hexo, Next]\r\ncategories、toc等等页面同理。\r\n文章草稿及发布\r\n如果不想在部署时让自己还未写完的文章也被发布，即可通过以下命令新建草稿。\r\n$ hexo new draft &quot;title&quot;\r\n该命令会在Hexo/source/_draft 目录下新建名为title.md的文件，打开该文件即可进行写作。当本地调试或部署至服务器时，默认无法查找到草稿，即不会发布草稿文章。\r\n在文章写作完毕后，需要将其移动至post文件夹，采用以下命令：\r\n$ hexo publish &quot;title&quot;\r\n该命令会将 Hexo/source/_draft 目录下对应的文章移动至 Hexo/source/_post 目录，再次本地调试或部署后即可找到该文章。\r\n实用工具\r\n\r\n参考文档：Hexo站点基本配置与实用工具指北 | zzy的打工日志\r\n\r\n数学公式的支持\r\nHexo采用的默认markdown渲染器对于复杂数学公式的支持不够完美，在渲染latex公式时会出现渲染错误，如将 _ 识别为markdown斜体标识，从而导致公式渲染失败。\r\n解决方案：采用hexo-renderer-pandoc作为新的渲染器，该插件可以完美解决上述问题。\r\n具体步骤：\r\n\r\n由于hexo-renderer-pandoc需要Pandoc的支持，故需要先安装Pandoc，进入链接安装即可。这里选择windows-x86_64.msi的版本。\r\n在Pandoc安装完毕后，回到Git Bash，键入以下命令：\r\n$ pandoc -v\r\n若正确显示版本号即可进行下一步，若返回未找到该命令，则检查系统环境变量后重启电脑即可。\r\n卸载默认的渲染器并安装对应插件。\r\n$ npm uninstall hexo-renderer-marked --save$ npm install hexo-renderer-pandoc --save\r\n安装mathJax。\r\n$ npm install hexo-filter-mathjax --save\r\n进入站点配置文件，添加如下内容：\r\nmathjax:  tags: none # or &#x27;ams&#x27; or &#x27;all&#x27;  single_dollars: true # enable single dollar signs as in-line math delimiters  cjk_width: 0.9 # relative CJK char width  normal_width: 0.6 # relative normal (monospace) width  append_css: true # add CSS to pages rendered by MathJax  every_page: false # 如果设置为true,默认每篇文章都会被mathjax渲染# hexo-renderer-pandoc (https://github.com/wzpan/hexo-renderer-pandoc)pandoc:  extra:    - toc: # will be passed as `--toc`. Note the colon，如果不需要自动生成目录无需添加此行  extensions:    - &#x27;+hard_line_breaks&#x27;    - &#x27;+emoji&#x27;    - &#x27;-implicit_figures&#x27;  template:     ./pandoc_template.html # 如果不需要自动生成目录无需添加此行# -----------------------------------------------------\r\n若上文中 every_page 字段设为false，则需在每篇文章的meta数据中添加 mathjax: true字段，即可开启公式渲染。\r\n进入NexT主题配置文件，并搜索 math 字段，修改如下：\r\nmath:  # Default (false) will load mathjax / katex script on demand.  # That is it only render those page which has `mathjax: true` in front-matter.  # If you set it to true, it will load mathjax / katex srcipt EVERY PAGE.  every_page: false  mathjax:    enable: true    # Available values: none | ams | all    tags: none  katex:    enable: false    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex    copy_tex: false\r\n回到Git Bash，执行以下命令：\r\n$ hexo clean$ hexo g$ hexo s\r\n即可在本地看到公式被成功渲染。\r\n\r\n主题Scheme\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n进入主题配置文件 ，搜索scheme字段，即可看到对应的Scheme配置。\r\nNexT主题内置了四种Scheme，分别有不同的布局和样式。\r\n\r\nMuse\r\nMist\r\nPisces\r\nGemini (我的样式)\r\n\r\n其中，Muse和Mist为单栏布局，Pisces和Gemini为双栏布局。可根据自己的喜好进行调整。\r\n网站Logo\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n进入主题配置文件，搜索 favicon 字段，即可设置网站Logo。\r\nfavicon:  small: /images/favicon-16x16-next.png  medium: /images/favicon-32x32-next.png # 修改该字段即可  safari_pinned_tab: /images/logo.svg  #android_manifest: /manifest.json\r\n背景图片与半透明\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n本地存储版：挑选一个自己喜欢的背景图片，将其放置于Hexo/themes/next/source/images文件夹下。\r\nCDN版：利用Cloudianry，上传背景图片并复制其url。\r\n进入文件夹 /Hexo/source，并新建 _data文件夹，在文件夹下新建 styles.styl 文件。\r\n进入主题配置文件，并搜索字段 custom_file_path ，将style行取消注释，即设置：\r\nstyle: source/_data/styles.styl\r\n打开刚刚创建的styles.styl文件，添加以下代码：\r\nbody &#123;    background:url(/images/bg.jpg);//图片路径    background-repeat: no-repeat;    background-attachment:fixed; //不重复    background-size: cover;      //填充    background-position:50% 50%;\t\topacity: 0.85;//设置文章主体透明度&#125;//侧边框的透明度设置.sidebar &#123;  background-color: transparent;  opacity: 0.9;&#125;//菜单栏的透明度设置.header-inner &#123;  background: rgba(255,255,255,0.8);&#125;\r\n本地调试即可观察到背景图片。\r\nmenu图标及计数显示\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n侧边栏标签、分类、归档个数默认不显示，可通过以下设置调整。\r\n进入主题配置文件，并搜索 menu_settings 字段，可根据喜好进行调整。\r\n# Enable / Disable menu icons / item badges.menu_settings:  icons: true #是否显示图标  badges: true #是否显示数量\r\n页面边框圆角\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n主题默认的页面边框均为方框，看起来比较生硬，我们可以修改css样式将其改为圆角矩形。\r\n进入 Hexo/source/_data 目录，新建 variables.styl 文件，并添加以下代码：\r\n$border-radius-inner     = 10px 10px 10px 10px;$border-radius           = 10px;\r\n进入主题配置文件，并搜索 custom_file_path 字段，将variable行取消注释。\r\n本地调试后，可以看到边框已经有了圆角样式。\r\n访客统计\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n进入主题配置文件，并搜索 busuanzi_count 字段，设置如下：\r\nbusuanzi_count:  enable: true  total_visitors: true  total_visitors_icon: fa fa-user  total_views: true  total_views_icon: fa fa-eye  post_views: true  post_views_icon: far fa-eye\r\n本地调试后，即可在网站底部观察到访客和浏览量统计。注意，由于busuanzi本地统计数据使用同一个数据库，在本地的浏览量与访客显示异常，部署后即可恢复正常。\r\n为了增加可读性，可以增加如下设置。\r\n进入 Hexo/themes/next/layout/_partials 目录，打开 footer.njk 文件。\r\n搜索 busuanzi_value_site_uv字段，修改值为：\r\n访客人数：&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人\r\n搜索 busuanzi_value_site_pv 字段，修改值为：\r\n浏览总量：&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次\r\n文章字数统计、阅读时长估计\r\n\r\n参考文档：参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n通过以下命令安装插件：\r\n$ npm install hexo-symbols-count-time --save\r\n进入主题配置文件，并搜索 symbols_count_time 字段，设置如下：\r\n# Post wordcount display settings# Dependencies: https://github.com/next-theme/hexo-word-countersymbols_count_time:  separated_meta: true  item_text_post: true  item_text_total: false\r\n进入站点配置文件，添加 symbols_count_time 字段，设置如下：\r\nsymbols_count_time:  symbols: true               # 文章字数统计  time: true                  # 文章阅读时长  total_symbols: true         # 站点总字数统计  total_time: true            # 站点总阅读时长  exclude_codeblock: true     # 排除代码字数统计  awl: 2                      # 每个单词所占字符数，中文建议设置为2，英文建议设置为4  wpm: 200                    # 每分钟阅读单词数，中文建议设置为300，英文建议设置为275  suffix: &quot;mins&quot;              # 时间单位\r\n在本地调试后，即可在每篇文章的标题下观察到文章字数统计和阅读时间估计。\r\n同样，为了增加可读性，进入 Hexo/themes/next/layout/_partials 目录，打开 footer.njk 文件。\r\n搜索 symbols_count_time.count_total 字段，修改值为：\r\n本站总字数&amp;asymp;&lt;span title=&quot;&#123;&#123; __(&#x27;symbols_count_time.count_total&#x27;) &#125;&#125;&quot;&gt;&#123;&#123; symbolsCountTotal(site) &#125;&#125;&lt;/span&gt;\r\n搜索 symbols_count_time.time_total 字段，修改值为：\r\n阅读本站耗时&amp;asymp;&lt;span title=&quot;&#123;&#123; __(&#x27;symbols_count_time.time_total&#x27;) &#125;&#125;&quot;&gt;&#123;&#123; symbolsTimeTotal(site, config\r\n网站运行时间\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n进入 Hexo/themes/next/layout/_partials 目录，打开 footer.njk 文件。\r\n在合适的位置（添加如下代码：\r\n&lt;div&gt;\t&lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;&lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;\t&lt;script&gt;\t\tvar now = new Date();\t\tfunction createtime() &#123;\t\t\tvar grt= new Date(&quot;08/15/2021 16:00:00&quot;);\t\t\tnow.setTime(now.getTime()+250);\t\t\tdays = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);\t\t\thours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);\t\t\tif(String(hnum).length ==1 )&#123;hnum = &quot;0&quot; + hnum;&#125; minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\t\t\tmnum = Math.floor(minutes); if(String(mnum).length ==1 )&#123;mnum = &quot;0&quot; + mnum;&#125;\t\t\tseconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\t\t\tsnum = Math.round(seconds); if(String(snum).length ==1 )&#123;snum = &quot;0&quot; + snum;&#125;\t\t\tdocument.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站已持续运行 &quot;+dnum+&quot; 天 &quot;;\t\t\tdocument.getElementById(&quot;times&quot;).innerHTML = hnum + &quot; 小时 &quot; + mnum + &quot; 分 &quot; + snum + &quot; 秒&quot;;\t\t&#125;\tsetInterval(&quot;createtime()&quot;,250);\t&lt;/script&gt;&lt;/div&gt;\r\n注意修改grt为你的建站时间。\r\n在本地调试后，即可在页面底部观察到运行时间。\r\n隐藏网站底部power by Hexo / 强力驱动\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n进入主题配置文件，并搜索 powered 字段，修改其值为false即可。\r\n回到顶部按钮与阅读进度提示\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n进入主题配置文件，并搜索 back2top 字段，设置如下：\r\nback2top:  enable: true  # Back to top in sidebar.  sidebar: true  # Scroll percent label in b2t button.  scrollpercent: true\r\n本地调试后，可在侧边栏观察到阅读进度，点击即可回到顶部。\r\n顶部阅读进度条\r\n\r\n参考文档：Hexo + Next深度美化指北 | zzy的打工日志\r\n\r\n进入主题配置文件，并搜索 reading_progress 字段，设置如下：\r\n# Reading progress barreading_progress:  enable: true  # Available values: left | right  start_at: left  # Available values: top | bottom  position: top  reversed: false  color: &quot;#37c6c0&quot;  height: 4px\r\n中文翻译设置\r\n新添加的菜单需要翻译对应的中文，打开theme/next/languages/zh-CN.yml，在 menu 下设置： menu:  home: 首页  archives: 归档  categories: 分类  tags: 标签  about: 关于  resources: 资源  search: 搜索\r\n设置建站时间\r\n\r\n参考文档：Next 主题配置_next主题-CSDN博客\r\n\r\n打开主题配置文件即 themes/next 下的_config.yml，查找since： footer:  #Specify the date when the site was setup. If not defined, current year will be used.  since: 2023-06      # 建站时间\r\n添加顶部加载条\r\n\r\n参考文档：Next 主题配置_next主题-CSDN博客\r\n\r\n在themes/next目录下打开Git Bash，输入：\r\ngit clone https://github.com/theme-next/theme-next-pace source/lib/pace\r\n打开主题配置文件即themes/next下的配置文件，找到pace，配置如下（你可以在theme自主选择类型）：\r\npace:  enable: true  # Themes list:  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal  theme: minimal\r\n侧边栏显示效果\r\n\r\n参考文档：Next 主题配置_next主题-CSDN博客\r\n\r\n打开主题配置文件即themes/next下的_config.yml，找到Sidebar Settings，设置：\r\nsidebar:  # Sidebar Position. #设置侧边栏位置  position: left  #position: right  #  - post    默认显示模式  #  - always  一直显示  #  - hide    初始隐藏  #  - remove  移除侧边栏  display: post\r\n侧边栏推荐阅读\r\n\r\n参考文档：Next 主题配置_next主题-CSDN博客\r\n\r\n打开主题配置文件即themes/next下的_config.yml，搜索links（里面写你想要的链接）：\r\n# Blog rollslinks_settings:  icon: fa fa-link  title: 推荐网站          # 修改名称  # Available values: block | inline  layout: blocklinks:  #Title: http://yoursite.com  菜鸟教程: https://www.runoob.com/  C语言中文网: http://c.biancheng.net/sitemap/  CS自学指南: https://csdiy.wiki/  Road To Coding: https://www.r2coding.com/#/  计算机专业学习路线: https://hackway.org/docs/cs/intro  鱼C论坛: https://fishc.com.cn\r\n添加社交链接\r\n\r\n参考文档：Next 主题配置_next主题-CSDN博客\r\n\r\n打开主题配置文件即themes/next下的_config.yml，搜索social：\r\n# Social Links# Usage: `Key: permalink || icon`# Key is the link label showing to end users.# Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.social:  GitHub: https://github.com/你的Github用户名 || fab fa-github  E-Mail: mailto:你的Gmail邮箱 || fa fa-envelope  CSDN: https://blog.csdn.net/你的CSDN的ID || fa fa-codiepie\r\n文章末尾添加版权声明\r\n\r\n参考文档：Next 主题配置_next主题-CSDN博客\r\n\r\n查找主题配置文件themes/next/_config.yml中的creative_commons：\r\ncreative_commons:  license: by-nc-sa  sidebar: false  post: true  # 将false改为true即可显示版权信息  language:\r\n文章添加阴影\r\n\r\n参考文档：Hexo-Next 主题博客个性化配置超详细，超全面(两万字)\r\n\r\n打开 /themes/next/source/css/_custom/custom.styl，添加：\r\n.post &#123;margin-top: 60px;margin-bottom: 60px;padding: 25px;-webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);-moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125;\r\n浏览页面显示当前浏览进度\r\n\r\n参考文档：Hexo-Next 主题博客个性化配置超详细，超全面(两万字)\r\n\r\n打开 themes/next/_config.yml，搜索关键字 scrollpercent，把 false 改为 true。\r\n文章置顶功能\r\n\r\n参考文档：Hexo-Next 主题博客个性化配置超详细，超全面(两万字)\r\n\r\n移除默认安装的插件：\r\nnpm uninstall hexo-generator-index --save\r\n安装新插件:\r\nnpm install hexo-generator-index-pin-top --save\r\n最后编辑有这需求的相关文章时，在Front-matter（文件最上方以—分隔的区域）加上一行：\r\ntop: true\r\n如果你置顶了多篇，怎么控制顺序呢？设置top的值（大的在前面），比如：\r\n# Post a.mdtitle: atop: 1# Post b.mdtitle: btop: 10\r\n文章 b 便会显示在文章 a 的前面\r\n代码块复制选项\r\n\r\n参考文档：Hexo-Next 主题博客个性化配置超详细，超全面(两万字)\r\n\r\n在主题配置文件中搜索copy_botton，找到如下配置\r\ncodeblock:border_radius: 8   # 按钮圆滑度copy_button:  # 设置是否开启代码块复制按钮\tenable: true\tshow_result: true  # 是否显示复制成功信息\r\n打赏功能\r\n在主题配置文件中搜索reward，找到如下配置：\r\nreward_settings:  # If true, a donate button will be displayed in every article by default.  enable: true  animation: truereward:  wechatpay: /images/wechatpay.jpg   #改为你自己的收款码地址  alipay: /images/alipay.jpg         #改为你自己的收款码地址  #paypal: /images/paypal.png  #bitcoin: /images/bitcoin.png\r\n修改文章内链接文本的样式\r\n\r\n参考文档：Hexo Next 主题安装、配置及美化 | Hello Memo\r\n\r\n\r\n将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。\r\n添加以下内容到 source/_data/styles.styl\r\n// 将链接文本设置为蓝色，鼠标划过时文字颜色加深，并显示下划线。.post-body p a &#123;  color: #0593d3;  border-bottom: none;  &amp;:hover &#123;    color: #0477ab;    text-decoration: underline;  &#125;&#125;\r\n\r\n修改文章底部的标签的 # 为图标\r\n\r\n参考文档：Hexo Next 主题安装、配置及美化 | Hello Memo\r\n\r\n\r\n修改主题配置文件 tag_icon 部分\r\ntag_icon: true # true: 显示为图标\r\n\r\n粒子钟\r\n\r\n参考文档：Hexo-Next主题美化博客\r\n\r\n修改主题配置文件 _config.next.yml\r\ncustom_file_path:  # head: source/_data/head.njk  #header: source/_data/header.njk  sidebar: source/_data/sidebar.njk   ## 取消该行的注释；这个针对侧边栏的样式自定义  #postMeta: source/_data/post-meta.njk  postBodyEnd: source/_data/post-body-end.njk  footer: source/_data/footer.njk  bodyEnd: source/_data/body-end.njk  variable: source/_data/variables.styl  #mixin: source/_data/mixins.styl  style: source/_data/styles.styl\r\n新建侧边栏粒子钟配置文件 source/_data/sidebar.njk，添加如下代码：\r\n&lt;div style=&quot;&quot;&gt;  &lt;canvas id=&quot;canvas&quot; style=&quot;width:60%;&quot;&gt;当前浏览器不支持canvas，请更换浏览器后再试&lt;/canvas&gt;&lt;/div&gt;&lt;script&gt;(function()&#123;   var digit=    [        [            [0,0,1,1,1,0,0],            [0,1,1,0,1,1,0],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [0,1,1,0,1,1,0],            [0,0,1,1,1,0,0]        ],//0        [            [0,0,0,1,1,0,0],            [0,1,1,1,1,0,0],            [0,0,0,1,1,0,0],            [0,0,0,1,1,0,0],            [0,0,0,1,1,0,0],            [0,0,0,1,1,0,0],            [0,0,0,1,1,0,0],            [0,0,0,1,1,0,0],            [0,0,0,1,1,0,0],            [1,1,1,1,1,1,1]        ],//1        [            [0,1,1,1,1,1,0],            [1,1,0,0,0,1,1],            [0,0,0,0,0,1,1],            [0,0,0,0,1,1,0],            [0,0,0,1,1,0,0],            [0,0,1,1,0,0,0],            [0,1,1,0,0,0,0],            [1,1,0,0,0,0,0],            [1,1,0,0,0,1,1],            [1,1,1,1,1,1,1]        ],//2        [            [1,1,1,1,1,1,1],            [0,0,0,0,0,1,1],            [0,0,0,0,1,1,0],            [0,0,0,1,1,0,0],            [0,0,1,1,1,0,0],            [0,0,0,0,1,1,0],            [0,0,0,0,0,1,1],            [0,0,0,0,0,1,1],            [1,1,0,0,0,1,1],            [0,1,1,1,1,1,0]        ],//3        [            [0,0,0,0,1,1,0],            [0,0,0,1,1,1,0],            [0,0,1,1,1,1,0],            [0,1,1,0,1,1,0],            [1,1,0,0,1,1,0],            [1,1,1,1,1,1,1],            [0,0,0,0,1,1,0],            [0,0,0,0,1,1,0],            [0,0,0,0,1,1,0],            [0,0,0,1,1,1,1]        ],//4        [            [1,1,1,1,1,1,1],            [1,1,0,0,0,0,0],            [1,1,0,0,0,0,0],            [1,1,1,1,1,1,0],            [0,0,0,0,0,1,1],            [0,0,0,0,0,1,1],            [0,0,0,0,0,1,1],            [0,0,0,0,0,1,1],            [1,1,0,0,0,1,1],            [0,1,1,1,1,1,0]        ],//5        [            [0,0,0,0,1,1,0],            [0,0,1,1,0,0,0],            [0,1,1,0,0,0,0],            [1,1,0,0,0,0,0],            [1,1,0,1,1,1,0],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [0,1,1,1,1,1,0]        ],//6        [            [1,1,1,1,1,1,1],            [1,1,0,0,0,1,1],            [0,0,0,0,1,1,0],            [0,0,0,0,1,1,0],            [0,0,0,1,1,0,0],            [0,0,0,1,1,0,0],            [0,0,1,1,0,0,0],            [0,0,1,1,0,0,0],            [0,0,1,1,0,0,0],            [0,0,1,1,0,0,0]        ],//7        [            [0,1,1,1,1,1,0],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [0,1,1,1,1,1,0],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [0,1,1,1,1,1,0]        ],//8        [            [0,1,1,1,1,1,0],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [1,1,0,0,0,1,1],            [0,1,1,1,0,1,1],            [0,0,0,0,0,1,1],            [0,0,0,0,0,1,1],            [0,0,0,0,1,1,0],            [0,0,0,1,1,0,0],            [0,1,1,0,0,0,0]        ],//9        [            [0,0,0,0,0,0,0],            [0,0,1,1,1,0,0],            [0,0,1,1,1,0,0],            [0,0,1,1,1,0,0],            [0,0,0,0,0,0,0],            [0,0,0,0,0,0,0],            [0,0,1,1,1,0,0],            [0,0,1,1,1,0,0],            [0,0,1,1,1,0,0],            [0,0,0,0,0,0,0]        ]//:    ];var canvas = document.getElementById(&#x27;canvas&#x27;);if(canvas.getContext)&#123;    var cxt = canvas.getContext(&#x27;2d&#x27;);    //声明canvas的宽高    var H = 100,W = 700;    canvas.height = H;    canvas.width = W;    cxt.fillStyle = &#x27;#f00&#x27;;    cxt.fillRect(10,10,50,50);    //存储时间数据    var data = [];    //存储运动的小球    var balls = [];    //设置粒子半径    var R = canvas.height/20-1;    (function()&#123;        var temp = /(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());        //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这7个数字组成        data.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);    &#125;)();    /*生成点阵数字*/    function renderDigit(index,num)&#123;        for(var i = 0; i &lt; digit[num].length; i++)&#123;            for(var j = 0; j &lt; digit[num][i].length; j++)&#123;                if(digit[num][i][j] == 1)&#123;                    cxt.beginPath();                    cxt.arc(14*(R+2)*index + j*2*(R+1)+(R+1),i*2*(R+1)+(R+1),R,0,2*Math.PI);                    cxt.closePath();                    cxt.fill();                &#125;            &#125;        &#125;    &#125;    /*更新时钟*/    function updateDigitTime()&#123;        var changeNumArray = [];        var temp = /(\\d)(\\d):(\\d)(\\d):(\\d)(\\d)/.exec(new Date());        var NewData = [];        NewData.push(temp[1],temp[2],10,temp[3],temp[4],10,temp[5],temp[6]);        for(var i = data.length-1; i &gt;=0 ; i--)&#123;            //时间发生变化            if(NewData[i] !== data[i])&#123;                //将变化的数字值和在data数组中的索引存储在changeNumArray数组中                changeNumArray.push(i+&#x27;_&#x27;+(Number(data[i])+1)%10);            &#125;        &#125;        //增加小球        for(var i = 0; i&lt; changeNumArray.length; i++)&#123;            addBalls.apply(this,changeNumArray[i].split(&#x27;_&#x27;));        &#125;        data = NewData.concat();    &#125;    /*更新小球状态*/    function updateBalls()&#123;        for(var i = 0; i &lt; balls.length; i++)&#123;            balls[i].stepY += balls[i].disY;            balls[i].x += balls[i].stepX;            balls[i].y += balls[i].stepY;            if(balls[i].x &gt; W + R || balls[i].y &gt; H + R)&#123;                balls.splice(i,1);                i--;            &#125;        &#125;    &#125;    /*增加要运动的小球*/    function addBalls(index,num)&#123;        var numArray = [1,2,3];        var colorArray =  [&quot;#3BE&quot;,&quot;#09C&quot;,&quot;#A6C&quot;,&quot;#93C&quot;,&quot;#9C0&quot;,&quot;#690&quot;,&quot;#FB3&quot;,&quot;#F80&quot;,&quot;#F44&quot;,&quot;#C00&quot;];        for(var i = 0; i &lt; digit[num].length; i++)&#123;            for(var j = 0; j &lt; digit[num][i].length; j++)&#123;                if(digit[num][i][j] == 1)&#123;                    var ball = &#123;                        x:14*(R+2)*index + j*2*(R+1)+(R+1),                        y:i*2*(R+1)+(R+1),                        stepX:Math.floor(Math.random() * 4 -2),                        stepY:-2*numArray[Math.floor(Math.random()*numArray.length)],                        color:colorArray[Math.floor(Math.random()*colorArray.length)],                        disY:1                    &#125;;                    balls.push(ball);                &#125;            &#125;        &#125;    &#125;    /*渲染*/    function render()&#123;        //重置画布宽度，达到清空画布的效果        canvas.height = 100;        //渲染时钟        for(var i = 0; i &lt; data.length; i++)&#123;            renderDigit(i,data[i]);        &#125;        //渲染小球        for(var i = 0; i &lt; balls.length; i++)&#123;            cxt.beginPath();            cxt.arc(balls[i].x,balls[i].y,R,0,2*Math.PI);            cxt.fillStyle = balls[i].color;            cxt.closePath();            cxt.fill();        &#125;    &#125;    clearInterval(oTimer);    var oTimer = setInterval(function()&#123;        //更新时钟        updateDigitTime();        //更新小球状态        updateBalls();        //渲染        render();    &#125;,50);&#125;&#125;)();&lt;/script&gt;&lt;div class=&quot;site-overview-wrap sidebar-panel&#123;% if not display_toc or toc(page.content).length &lt;= 1 %&#125; sidebar-panel-active&#123;% endif %&#125;&quot;&gt;&lt;div class=&quot;site-overview&quot;&gt;    &#123;% if theme.recent_posts %&#125;    &lt;div class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout  &#125;&#125;&quot;&gt;    &lt;div class=&quot;links-of-blogroll-title&quot;&gt;        &lt;!-- modify icon to fire by szw --&gt;        &lt;i class=&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;        &#123;&#123; theme.recent_posts_title &#125;&#125;    &lt;/div&gt;    &lt;ul class=&quot;links-of-blogroll-list&quot;&gt;        &#123;% set posts = site.posts.sort(&#x27;-date&#x27;) %&#125;        &#123;% for post in posts.slice(&#x27;0&#x27;, &#x27;5&#x27;) %&#125;        &lt;li&gt;            &lt;a href=&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title=&quot;&#123;&#123; post.title &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;/a&gt;        &lt;/li&gt;        &#123;% endfor %&#125;    &lt;/ul&gt;    &lt;/div&gt;&#123;% endif %&#125;&lt;/div&gt;&lt;/div&gt;\r\n编辑 source/_data/styles.styl 样式文件，添加如下代码：\r\n// 粒子时钟样式.site-overview &#123;  text-align: center;&#125;canvas#canvas &#123;  margin-top: 20px;&#125;\r\n添加Github快捷关注\r\n\r\n参考文档：Hexo+NexT主题美化\r\n\r\n在主题的配置文件中, 搜索: github_banner, 修改为自定义值, 如下:\r\ngithub_banner:  enable: true  permalink: https://github.com/KurohaKirito  title: Follow me on GitHub\r\n音乐播放器APlayer\r\n\r\n参考文档：Hexo+NexT主题美化\r\n\r\nAPlayer源码地址: APlayer\r\n首先, 在 next/source/lib 目录下新建 aplayer 文件夹, 之后下载项目源码并解压, 将 APlayer.min.js 和 APlayer.min.css 文件复制到 next/source/lib/aplayer 中.\r\n再之后, 继续在当前目录下新建一个 music.js 文件, 输入以下代码:\r\nconst ap = new APlayer(&#123;    container: document.getElementById(&#x27;aplayer&#x27;),    fixed: true,    autoplay: false,    audio: [      &#123;        name: &#x27;歌曲的名字&#x27;,        artist: &#x27;歌手&#x27;,        url: &#x27;音乐文件的地址&#x27;,        cover: &#x27;封面图片的地址&#x27;,      &#125;    ]&#125;);\r\n之后修改 themes/next/layout/_layout.njk 在文件最后添加:\r\n&lt;!--Aplayer 音乐播放功能--&gt;&#123;% if theme.aplayer %&#125;  &lt;link rel=&quot;stylesheet&quot; href=&quot;/lib/aplayer/APlayer.min.css&quot;&gt;  &lt;div id=&quot;aplayer&quot;&gt;&lt;/div&gt;  &lt;script type=&quot;text/javascript&quot; src=&quot;/lib/aplayer/APlayer.min.js&quot;&gt;&lt;/script&gt;  &lt;script type=&quot;text/javascript&quot; src=&quot;/lib/aplayer/music.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125;\r\n最后在 主题配置文件 中, 找一个自己喜欢的位置, 写入 aplayer: true. 什么时候想要关闭这个功能了, 直接设置为 false 即可.\r\n启用Pjax\r\n\r\n参考文档：Hexo主题详细配置之一\r\n\r\nPjax 主要用于加速 Web 页面的切换速度，同时也可以用来解决 Aplayer 音频播发器切换页面后播放出现中断的问题\r\n# 进入Next主题的目录$ cd themes/next\r\n# 下载3D资源文件$ git clone https://github.com/theme-next/theme-next-three source/lib/three\r\n更改 Next 主题的配置文件 themes/next/_config.yml，设置以下内容\r\npjax: true\r\n鼠标烟花特效\r\n\r\n参考文档：Hexo-Next主题美化博客\r\n\r\n安装fireworks点击特效动画\r\nnpm install next-theme/hexo-next-fireworks  # Fireworks animation for NexT.\r\n黑/白模式切换\r\n\r\n参考文档：hexo-next-darkmode/README_CN.md at main · rqh656418510/hexo-next-darkmode\r\n\r\n安装\r\nnpm install hexo-next-darkmode --save\r\n配置\r\n首先确保 NexT 主题原生的 darkmode 选项设置为 false：\r\n# Close NexT&#x27;s darkmodedarkmode: false\r\n往 NexT 主题的 _config.yml 配置文件里添加以下内容：\r\n# Darkmode JS# For more information: https://github.com/rqh656418510/hexo-next-darkmode, https://github.com/sandoche/Darkmode.jsdarkmode_js:  enable: true  bottom: &#x27;64px&#x27; # default: &#x27;32px&#x27;  right: &#x27;unset&#x27; # default: &#x27;32px&#x27;  left: &#x27;32px&#x27; # default: &#x27;unset&#x27;  time: &#x27;0.5s&#x27; # default: &#x27;0.3s&#x27;  mixColor: &#x27;transparent&#x27; # default: &#x27;#fff&#x27;  backgroundColor: &#x27;transparent&#x27; # default: &#x27;#fff&#x27;  buttonColorDark: &#x27;#100f2c&#x27; # default: &#x27;#100f2c&#x27;  buttonColorLight: &#x27;#fff&#x27; # default: &#x27;#fff&#x27;  isActivated: false # default false  saveInCookies: true # default: true  label: &#x27;🌓&#x27; # default: &#x27;&#x27;  autoMatchOsTheme: true # default: true  libUrl: # Set custom library cdn url for Darkmode.js\r\n","categories":["Hexo"],"tags":["技术","Hexo教程"]}]